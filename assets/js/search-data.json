{
  
    
        "post0": {
            "title": "Playstation Classifier",
            "content": "Setup . import zipfile with zipfile.ZipFile(&#39;images/playstation.zip&#39;, &#39;r&#39;) as zip_ref: zip_ref.extractall() . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;0a449f766989411ea479770904e9cd75&#39;) . bear_types = &#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39; path = Path(&#39;images/playstation&#39;) . File download . if not path.exists(): path.mkdir() for o in bear_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} bear&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . File tests . fns = get_image_files(path) fns . (#736) [Path(&#39;images/playstation/3/00000047.jpg&#39;),Path(&#39;images/playstation/3/00000055.jpg&#39;),Path(&#39;images/playstation/3/00000012.jpeg&#39;),Path(&#39;images/playstation/3/00000107.jpg&#39;),Path(&#39;images/playstation/3/00000036.jpg&#39;),Path(&#39;images/playstation/3/00000000.png_client=cbc79c14efcebee57402_signature=3c726b1d9ab6205b82f733bc6f6f4a6b88a874de.png&#39;),Path(&#39;images/playstation/3/00000097.jpg&#39;),Path(&#39;images/playstation/3/00000148.jpg&#39;),Path(&#39;images/playstation/3/00000145.jpeg&#39;),Path(&#39;images/playstation/3/00000110.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 2.200467 | 1.151368 | 0.394558 | 00:11 | . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . epoch train_loss valid_loss error_rate time . 0 | 0.995675 | 0.812293 | 0.299320 | 00:13 | . 1 | 0.832542 | 0.495169 | 0.176871 | 00:13 | . 2 | 0.679947 | 0.392348 | 0.142857 | 00:14 | . 3 | 0.565052 | 0.389338 | 0.149660 | 00:13 | . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . Exporting . learn.export() . NameError Traceback (most recent call last) &lt;ipython-input-8-fa5b61306ef3&gt; in &lt;module&gt; -&gt; 1 learn.export() NameError: name &#39;learn&#39; is not defined . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/grizzly.jpg&#39;) . learn_inf.dls.vocab . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;ps5.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: Playstation {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: Playstation {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Playstation-Classifier.html",
            "relUrl": "/2021/02/16/Playstation-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Maleri Classifier",
            "content": "Setup . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . |████████████████████████████████| 727kB 12.8MB/s |████████████████████████████████| 194kB 23.8MB/s |████████████████████████████████| 51kB 4.5MB/s |████████████████████████████████| 1.2MB 35.7MB/s |████████████████████████████████| 61kB 5.9MB/s Mounted at /content/gdrive . from fastbook import * from fastai.vision.widgets import * . bear_types = &#39;Abildgaard, Nicolai&#39;,&#39;Dahl, J.C&#39;,&#39;Eckersberg, C.W&#39;,&#39;Hammershøi, Vilhelm&#39;,&#39;Hansen, Constantin&#39;,&#39;Jensen, C.A&#39;,&#39;Juel, Jens&#39;,&#39;Krøyer, P.S&#39;,&#39;Kyhn, Vilhelm&#39;,&#39;Købke, Christen&#39;,&#39;Lorentzen, C.A&#39;,&#39;Marstrand, Wilhelm&#39;,&#39;Pauelsen, Erik&#39;,&#39;Philipsen, Theodor&#39;,&#39;Skovgaard, P.C&#39; path = Path(&#39;Images/paintings&#39;) . File tests . fns = get_image_files(path) fns . (#604) [Path(&#39;Images/paintings/Kroyer, P.S/019.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/013.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/016.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/017.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/006.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/001.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/008.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/007.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/010.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/011.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 3.917598 | 2.874836 | 0.791667 | 01:49 | . epoch train_loss valid_loss error_rate time . 0 | 2.970143 | 2.576576 | 0.716667 | 02:16 | . 1 | 2.644958 | 2.366002 | 0.683333 | 02:14 | . 2 | 2.341411 | 2.299324 | 0.666667 | 02:14 | . 3 | 2.163972 | 2.296838 | 0.658333 | 02:21 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;Images/painting.jpg&#39;) . (&#39;Marstrand, Wilhelm&#39;, tensor(11), tensor([0.2217, 0.0525, 0.0057, 0.0223, 0.0413, 0.0789, 0.0022, 0.0418, 0.0257, 0.0107, 0.1611, 0.2983, 0.0207, 0.0045, 0.0125])) . learn_inf.dls.vocab . [&#39;Abildgaard, Nicolai&#39;, &#39;Dahl, J.C&#39;, &#39;Eckersberg, C.W&#39;, &#39;Hammershoi, Vilhelm&#39;, &#39;Hansen, Constantin&#39;, &#39;Jensen, C.A&#39;, &#39;Juel, Jens&#39;, &#39;Kobke, Christen&#39;, &#39;Kroyer, P.S&#39;, &#39;Kyhn, Vilhelm&#39;, &#39;Lorentzen, C.A&#39;, &#39;Marstrand, Wilhelm&#39;, &#39;Pauelsen, Erik&#39;, &#39;Philipsen, Theodor&#39;, &#39;Skovgaard, P.C&#39;] . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;Images/painting.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . btn_upload = widgets.FileUpload() . VBox([widgets.Label(&#39;Select your painting!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Maleri-Classifier.html",
            "relUrl": "/2021/02/16/Maleri-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Maleri Classifier v2",
            "content": "Setup . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . from fastbook import * from fastai.vision.widgets import * . types = &#39;Abildgaard, Nicolai&#39;,&#39;Dahl, J.C&#39;,&#39;Eckersberg, C.W&#39;,&#39;Hammershøi, Vilhelm&#39;,&#39;Hansen, Constantin&#39;,&#39;Jensen, C.A&#39;,&#39;Juel, Jens&#39;,&#39;Krøyer, P.S&#39;,&#39;Kyhn, Vilhelm&#39;,&#39;Købke, Christen&#39;,&#39;Lorentzen, C.A&#39;,&#39;Marstrand, Wilhelm&#39;,&#39;Pauelsen, Erik&#39;,&#39;Philipsen, Theodor&#39;,&#39;Skovgaard, P.C&#39; path = Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier&#39;) . File tests . fns = get_image_files(path) fns . (#604) [Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/010.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/002.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/003.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/006.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/008.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/001.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/009.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/007.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/004.jpg&#39;),Path(&#39;gdrive/MyDrive/AI Machine Learning/images/Maleri Classifier/Dahl, J.C/005.jpg&#39;)...] . data = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = data.dataloaders(path) . Model training . data = data.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = data.dataloaders(path) . learn = cnn_learner(dls, resnet152, metrics=error_rate) learn.fine_tune(4) . . 0.00% [0/1 00:00&lt;00:00] epoch train_loss valid_loss error_rate time . . 28.57% [2/7 00:14&lt;00:35 4.0941] &lt;/div&gt; &lt;/div&gt; KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-8-122e07a38807&gt; in &lt;module&gt;() 1 learn = cnn_learner(dls, resnet152, metrics=error_rate) -&gt; 2 learn.fine_tune(4) /usr/local/lib/python3.6/dist-packages/fastai/callback/schedule.py in fine_tune(self, epochs, base_lr, freeze_epochs, lr_mult, pct_start, div, **kwargs) 155 &#34;Fine tune with `freeze` for `freeze_epochs` then with `unfreeze` from `epochs` using discriminative LR&#34; 156 self.freeze() --&gt; 157 self.fit_one_cycle(freeze_epochs, slice(base_lr), pct_start=0.99, **kwargs) 158 base_lr /= 2 159 self.unfreeze() /usr/local/lib/python3.6/dist-packages/fastai/callback/schedule.py in fit_one_cycle(self, n_epoch, lr_max, div, div_final, pct_start, wd, moms, cbs, reset_opt) 110 scheds = {&#39;lr&#39;: combined_cos(pct_start, lr_max/div, lr_max, lr_max/div_final), 111 &#39;mom&#39;: combined_cos(pct_start, *(self.moms if moms is None else moms))} --&gt; 112 self.fit(n_epoch, cbs=ParamScheduler(scheds)+L(cbs), reset_opt=reset_opt, wd=wd) 113 114 # Cell /usr/local/lib/python3.6/dist-packages/fastai/learner.py in fit(self, n_epoch, lr, wd, cbs, reset_opt) 209 self.opt.set_hypers(lr=self.lr if lr is None else lr) 210 self.n_epoch = n_epoch --&gt; 211 self._with_events(self._do_fit, &#39;fit&#39;, CancelFitException, self._end_cleanup) 212 213 def _end_cleanup(self): self.dl,self.xb,self.yb,self.pred,self.loss = None,(None,),(None,),None,None /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final) 158 159 def _with_events(self, f, event_type, ex, final=noop): --&gt; 160 try: self(f&#39;before_{event_type}&#39;); f() 161 except ex: self(f&#39;after_cancel_{event_type}&#39;) 162 self(f&#39;after_{event_type}&#39;); final() /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _do_fit(self) 200 for epoch in range(self.n_epoch): 201 self.epoch=epoch --&gt; 202 self._with_events(self._do_epoch, &#39;epoch&#39;, CancelEpochException) 203 204 def fit(self, n_epoch, lr=None, wd=None, cbs=None, reset_opt=False): /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final) 158 159 def _with_events(self, f, event_type, ex, final=noop): --&gt; 160 try: self(f&#39;before_{event_type}&#39;); f() 161 except ex: self(f&#39;after_cancel_{event_type}&#39;) 162 self(f&#39;after_{event_type}&#39;); final() /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _do_epoch(self) 194 195 def _do_epoch(self): --&gt; 196 self._do_epoch_train() 197 self._do_epoch_validate() 198 /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _do_epoch_train(self) 186 def _do_epoch_train(self): 187 self.dl = self.dls.train --&gt; 188 self._with_events(self.all_batches, &#39;train&#39;, CancelTrainException) 189 190 def _do_epoch_validate(self, ds_idx=1, dl=None): /usr/local/lib/python3.6/dist-packages/fastai/learner.py in _with_events(self, f, event_type, ex, final) 158 159 def _with_events(self, f, event_type, ex, final=noop): --&gt; 160 try: self(f&#39;before_{event_type}&#39;); f() 161 except ex: self(f&#39;after_cancel_{event_type}&#39;) 162 self(f&#39;after_{event_type}&#39;); final() /usr/local/lib/python3.6/dist-packages/fastai/learner.py in all_batches(self) 164 def all_batches(self): 165 self.n_iter = len(self.dl) --&gt; 166 for o in enumerate(self.dl): self.one_batch(*o) 167 168 def _do_one_batch(self): /usr/local/lib/python3.6/dist-packages/fastai/data/load.py in __iter__(self) 107 self.before_iter() 108 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 109 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 110 if self.device is not None: b = to_device(b, self.device) 111 yield self.after_batch(b) /usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py in __next__(self) 433 if self._sampler_iter is None: 434 self._reset() --&gt; 435 data = self._next_data() 436 self._num_yielded += 1 437 if self._dataset_kind == _DatasetKind.Iterable and /usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py in _next_data(self) 1066 1067 assert not self._shutdown and self._tasks_outstanding &gt; 0 -&gt; 1068 idx, data = self._get_data() 1069 self._tasks_outstanding -= 1 1070 if self._dataset_kind == _DatasetKind.Iterable: /usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py in _get_data(self) 1032 else: 1033 while True: -&gt; 1034 success, data = self._try_get_data() 1035 if success: 1036 return data /usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py in _try_get_data(self, timeout) 870 # (bool: whether successfully get data, any: data if successful else None) 871 try: --&gt; 872 data = self._data_queue.get(timeout=timeout) 873 return (True, data) 874 except Exception as e: /usr/lib/python3.6/multiprocessing/queues.py in get(self, block, timeout) 102 if block: 103 timeout = deadline - time.monotonic() --&gt; 104 if not self._poll(timeout): 105 raise Empty 106 elif not self._poll(): /usr/lib/python3.6/multiprocessing/connection.py in poll(self, timeout) 255 self._check_closed() 256 self._check_readable() --&gt; 257 return self._poll(timeout) 258 259 def __enter__(self): /usr/lib/python3.6/multiprocessing/connection.py in _poll(self, timeout) 412 413 def _poll(self, timeout): --&gt; 414 r = wait([self], timeout) 415 return bool(r) 416 /usr/lib/python3.6/multiprocessing/connection.py in wait(object_list, timeout) 909 910 while True: --&gt; 911 ready = selector.select(timeout) 912 if ready: 913 return [key.fileobj for (key, events) in ready] /usr/lib/python3.6/selectors.py in select(self, timeout) 374 ready = [] 375 try: --&gt; 376 fd_event_list = self._poll.poll(timeout) 377 except InterruptedError: 378 return ready KeyboardInterrupt: . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;Images/painting.jpg&#39;) . (&#39;Marstrand, Wilhelm&#39;, tensor(11), tensor([0.2217, 0.0525, 0.0057, 0.0223, 0.0413, 0.0789, 0.0022, 0.0418, 0.0257, 0.0107, 0.1611, 0.2983, 0.0207, 0.0045, 0.0125])) . learn_inf.dls.vocab . [&#39;Abildgaard, Nicolai&#39;, &#39;Dahl, J.C&#39;, &#39;Eckersberg, C.W&#39;, &#39;Hammershoi, Vilhelm&#39;, &#39;Hansen, Constantin&#39;, &#39;Jensen, C.A&#39;, &#39;Juel, Jens&#39;, &#39;Kobke, Christen&#39;, &#39;Kroyer, P.S&#39;, &#39;Kyhn, Vilhelm&#39;, &#39;Lorentzen, C.A&#39;, &#39;Marstrand, Wilhelm&#39;, &#39;Pauelsen, Erik&#39;, &#39;Philipsen, Theodor&#39;, &#39;Skovgaard, P.C&#39;] . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;Images/painting.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . btn_upload = widgets.FileUpload() . VBox([widgets.Label(&#39;Select your painting!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . &lt;/div&gt; .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Maleri-Classifier-v2.html",
            "relUrl": "/2021/02/16/Maleri-Classifier-v2.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Hotdog Classifier",
            "content": "Setup . import zipfile with zipfile.ZipFile(&#39;images/playstation.zip&#39;, &#39;r&#39;) as zip_ref: zip_ref.extractall() . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;0a449f766989411ea479770904e9cd75&#39;) . bear_types = &#39;hotdog&#39;,&#39;random&#39; path = Path(&#39;hotdogs&#39;) . File download . if not path.exists(): path.mkdir() for o in bear_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . File tests . fns = get_image_files(path) fns . (#282) [Path(&#39;hotdogs/hotdog/00000034.jpg&#39;),Path(&#39;hotdogs/hotdog/00000015.jpg&#39;),Path(&#39;hotdogs/hotdog/00000002.jpg&#39;),Path(&#39;hotdogs/hotdog/00000095.jpg&#39;),Path(&#39;hotdogs/hotdog/00000096.jpg&#39;),Path(&#39;hotdogs/hotdog/00000019.jpg&#39;),Path(&#39;hotdogs/hotdog/00000044.jpg&#39;),Path(&#39;hotdogs/hotdog/00000023.jpg&#39;),Path(&#39;hotdogs/hotdog/00000033.png&#39;),Path(&#39;hotdogs/hotdog/00000108.jpg&#39;)...] . failed = verify_images(fns) failed . (#2) [Path(&#39;hotdogs/random/00000134.gif&#39;),Path(&#39;hotdogs/random/00000114.svg&#39;)] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 0.939288 | 0.800330 | 0.339286 | 00:47 | . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . epoch train_loss valid_loss error_rate time . 0 | 0.258995 | 0.127631 | 0.035714 | 01:03 | . 1 | 0.181107 | 0.013016 | 0.000000 | 01:03 | . 2 | 0.123359 | 0.002594 | 0.000000 | 01:03 | . 3 | 0.106967 | 0.001533 | 0.000000 | 01:03 | . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.dls.vocab . App . learn_inf = load_learner(&#39;HotdogExport.pkl&#39;) . img = PILImage.create(&#39;hotdog.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your hotdog!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Hotdog-Classifier.html",
            "relUrl": "/2021/02/16/Hotdog-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tobbe3108.github.io/Fast.ai.Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tobbe3108.github.io/Fast.ai.Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}