{
  
    
        "post0": {
            "title": "Playstation Classifier",
            "content": "Setup . import zipfile with zipfile.ZipFile(&#39;images/playstation.zip&#39;, &#39;r&#39;) as zip_ref: zip_ref.extractall() . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;0a449f766989411ea479770904e9cd75&#39;) . bear_types = &#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39; path = Path(&#39;images/playstation&#39;) . File download . if not path.exists(): path.mkdir() for o in bear_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} bear&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . File tests . fns = get_image_files(path) fns . (#736) [Path(&#39;images/playstation/3/00000047.jpg&#39;),Path(&#39;images/playstation/3/00000055.jpg&#39;),Path(&#39;images/playstation/3/00000012.jpeg&#39;),Path(&#39;images/playstation/3/00000107.jpg&#39;),Path(&#39;images/playstation/3/00000036.jpg&#39;),Path(&#39;images/playstation/3/00000000.png_client=cbc79c14efcebee57402_signature=3c726b1d9ab6205b82f733bc6f6f4a6b88a874de.png&#39;),Path(&#39;images/playstation/3/00000097.jpg&#39;),Path(&#39;images/playstation/3/00000148.jpg&#39;),Path(&#39;images/playstation/3/00000145.jpeg&#39;),Path(&#39;images/playstation/3/00000110.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 2.200467 | 1.151368 | 0.394558 | 00:11 | . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . epoch train_loss valid_loss error_rate time . 0 | 0.995675 | 0.812293 | 0.299320 | 00:13 | . 1 | 0.832542 | 0.495169 | 0.176871 | 00:13 | . 2 | 0.679947 | 0.392348 | 0.142857 | 00:14 | . 3 | 0.565052 | 0.389338 | 0.149660 | 00:13 | . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . /opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . Exporting . learn.export() . NameError Traceback (most recent call last) &lt;ipython-input-8-fa5b61306ef3&gt; in &lt;module&gt; -&gt; 1 learn.export() NameError: name &#39;learn&#39; is not defined . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/grizzly.jpg&#39;) . learn_inf.dls.vocab . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;ps5.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: Playstation {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: Playstation {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Playstation-Classifier.html",
            "relUrl": "/2021/02/16/Playstation-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Maleri Classifier",
            "content": "Setup . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . |████████████████████████████████| 727kB 12.8MB/s |████████████████████████████████| 194kB 23.8MB/s |████████████████████████████████| 51kB 4.5MB/s |████████████████████████████████| 1.2MB 35.7MB/s |████████████████████████████████| 61kB 5.9MB/s Mounted at /content/gdrive . from fastbook import * from fastai.vision.widgets import * . bear_types = &#39;Abildgaard, Nicolai&#39;,&#39;Dahl, J.C&#39;,&#39;Eckersberg, C.W&#39;,&#39;Hammershøi, Vilhelm&#39;,&#39;Hansen, Constantin&#39;,&#39;Jensen, C.A&#39;,&#39;Juel, Jens&#39;,&#39;Krøyer, P.S&#39;,&#39;Kyhn, Vilhelm&#39;,&#39;Købke, Christen&#39;,&#39;Lorentzen, C.A&#39;,&#39;Marstrand, Wilhelm&#39;,&#39;Pauelsen, Erik&#39;,&#39;Philipsen, Theodor&#39;,&#39;Skovgaard, P.C&#39; path = Path(&#39;Images/paintings&#39;) . File tests . fns = get_image_files(path) fns . (#604) [Path(&#39;Images/paintings/Kroyer, P.S/019.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/013.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/016.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/017.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/006.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/001.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/008.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/007.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/010.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/011.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 3.917598 | 2.874836 | 0.791667 | 01:49 | . epoch train_loss valid_loss error_rate time . 0 | 2.970143 | 2.576576 | 0.716667 | 02:16 | . 1 | 2.644958 | 2.366002 | 0.683333 | 02:14 | . 2 | 2.341411 | 2.299324 | 0.666667 | 02:14 | . 3 | 2.163972 | 2.296838 | 0.658333 | 02:21 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;Images/painting.jpg&#39;) . (&#39;Marstrand, Wilhelm&#39;, tensor(11), tensor([0.2217, 0.0525, 0.0057, 0.0223, 0.0413, 0.0789, 0.0022, 0.0418, 0.0257, 0.0107, 0.1611, 0.2983, 0.0207, 0.0045, 0.0125])) . learn_inf.dls.vocab . [&#39;Abildgaard, Nicolai&#39;, &#39;Dahl, J.C&#39;, &#39;Eckersberg, C.W&#39;, &#39;Hammershoi, Vilhelm&#39;, &#39;Hansen, Constantin&#39;, &#39;Jensen, C.A&#39;, &#39;Juel, Jens&#39;, &#39;Kobke, Christen&#39;, &#39;Kroyer, P.S&#39;, &#39;Kyhn, Vilhelm&#39;, &#39;Lorentzen, C.A&#39;, &#39;Marstrand, Wilhelm&#39;, &#39;Pauelsen, Erik&#39;, &#39;Philipsen, Theodor&#39;, &#39;Skovgaard, P.C&#39;] . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;Images/painting.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . btn_upload = widgets.FileUpload() . VBox([widgets.Label(&#39;Select your painting!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Maleri-Classifier.html",
            "relUrl": "/2021/02/16/Maleri-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Maleri Classifier",
            "content": "Setup . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . |████████████████████████████████| 727kB 12.8MB/s |████████████████████████████████| 194kB 23.8MB/s |████████████████████████████████| 51kB 4.5MB/s |████████████████████████████████| 1.2MB 35.7MB/s |████████████████████████████████| 61kB 5.9MB/s Mounted at /content/gdrive . from fastbook import * from fastai.vision.widgets import * . bear_types = &#39;Abildgaard, Nicolai&#39;,&#39;Dahl, J.C&#39;,&#39;Eckersberg, C.W&#39;,&#39;Hammershøi, Vilhelm&#39;,&#39;Hansen, Constantin&#39;,&#39;Jensen, C.A&#39;,&#39;Juel, Jens&#39;,&#39;Krøyer, P.S&#39;,&#39;Kyhn, Vilhelm&#39;,&#39;Købke, Christen&#39;,&#39;Lorentzen, C.A&#39;,&#39;Marstrand, Wilhelm&#39;,&#39;Pauelsen, Erik&#39;,&#39;Philipsen, Theodor&#39;,&#39;Skovgaard, P.C&#39; path = Path(&#39;Images/paintings&#39;) . File tests . fns = get_image_files(path) fns . (#604) [Path(&#39;Images/paintings/Kroyer, P.S/019.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/013.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/016.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/017.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/006.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/001.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/008.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/007.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/010.jpg&#39;),Path(&#39;Images/paintings/Kroyer, P.S/011.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 3.917598 | 2.874836 | 0.791667 | 01:49 | . epoch train_loss valid_loss error_rate time . 0 | 2.970143 | 2.576576 | 0.716667 | 02:16 | . 1 | 2.644958 | 2.366002 | 0.683333 | 02:14 | . 2 | 2.341411 | 2.299324 | 0.666667 | 02:14 | . 3 | 2.163972 | 2.296838 | 0.658333 | 02:21 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . # for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;Images/painting.jpg&#39;) . (&#39;Marstrand, Wilhelm&#39;, tensor(11), tensor([0.2217, 0.0525, 0.0057, 0.0223, 0.0413, 0.0789, 0.0022, 0.0418, 0.0257, 0.0107, 0.1611, 0.2983, 0.0207, 0.0045, 0.0125])) . learn_inf.dls.vocab . [&#39;Abildgaard, Nicolai&#39;, &#39;Dahl, J.C&#39;, &#39;Eckersberg, C.W&#39;, &#39;Hammershoi, Vilhelm&#39;, &#39;Hansen, Constantin&#39;, &#39;Jensen, C.A&#39;, &#39;Juel, Jens&#39;, &#39;Kobke, Christen&#39;, &#39;Kroyer, P.S&#39;, &#39;Kyhn, Vilhelm&#39;, &#39;Lorentzen, C.A&#39;, &#39;Marstrand, Wilhelm&#39;, &#39;Pauelsen, Erik&#39;, &#39;Philipsen, Theodor&#39;, &#39;Skovgaard, P.C&#39;] . App . learn_inf = load_learner(&#39;export.pkl&#39;) . img = PILImage.create(&#39;Images/painting.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . btn_upload = widgets.FileUpload() . VBox([widgets.Label(&#39;Select your painting!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Maleri-Classifier-v2.html",
            "relUrl": "/2021/02/16/Maleri-Classifier-v2.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Hotdog Classifier",
            "content": "Setup . import zipfile with zipfile.ZipFile(&#39;images/playstation.zip&#39;, &#39;r&#39;) as zip_ref: zip_ref.extractall() . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;0a449f766989411ea479770904e9cd75&#39;) . bear_types = &#39;hotdog&#39;,&#39;random&#39; path = Path(&#39;hotdogs&#39;) . File download . if not path.exists(): path.mkdir() for o in bear_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . File tests . fns = get_image_files(path) fns . (#282) [Path(&#39;hotdogs/hotdog/00000034.jpg&#39;),Path(&#39;hotdogs/hotdog/00000015.jpg&#39;),Path(&#39;hotdogs/hotdog/00000002.jpg&#39;),Path(&#39;hotdogs/hotdog/00000095.jpg&#39;),Path(&#39;hotdogs/hotdog/00000096.jpg&#39;),Path(&#39;hotdogs/hotdog/00000019.jpg&#39;),Path(&#39;hotdogs/hotdog/00000044.jpg&#39;),Path(&#39;hotdogs/hotdog/00000023.jpg&#39;),Path(&#39;hotdogs/hotdog/00000033.png&#39;),Path(&#39;hotdogs/hotdog/00000108.jpg&#39;)...] . failed = verify_images(fns) failed . (#2) [Path(&#39;hotdogs/random/00000134.gif&#39;),Path(&#39;hotdogs/random/00000114.svg&#39;)] . failed.map(Path.unlink); . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . Model training . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 0.939288 | 0.800330 | 0.339286 | 00:47 | . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . epoch train_loss valid_loss error_rate time . 0 | 0.258995 | 0.127631 | 0.035714 | 01:03 | . 1 | 0.181107 | 0.013016 | 0.000000 | 01:03 | . 2 | 0.123359 | 0.002594 | 0.000000 | 01:03 | . 3 | 0.106967 | 0.001533 | 0.000000 | 01:03 | . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . /usr/local/lib/python3.6/dist-packages/PIL/Image.py:932: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images &#34;Palette images with Transparency expressed in bytes should be &#34; . interp.plot_top_losses(5, nrows=1) . Data cleaning . cleaner = ImageClassifierCleaner(learn) cleaner . Exporting . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.dls.vocab . App . learn_inf = load_learner(&#39;HotdogExport.pkl&#39;) . img = PILImage.create(&#39;hotdog.jpg&#39;) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your hotdog!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://tobbe3108.github.io/Fast.ai.Blog/2021/02/16/Hotdog-Classifier.html",
            "relUrl": "/2021/02/16/Hotdog-Classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tobbe3108.github.io/Fast.ai.Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tobbe3108.github.io/Fast.ai.Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}